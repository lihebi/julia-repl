#+TITLE: My fork of julia-repl

This is my fork, mainly to use comint and add additional utilities to
send code blocks. The original README is
[[file:README.orig.md][README.orig.md]].

* Compare julia-repl with Juno

- Atom does not support full emacs bindings with reasonable
  effort. After all, Atom is not Emacs.
- Juno cannot evaluate arbitrary *inner* block. It will always
  evaluate the whole block up to the top-level.  E.g. in the following
  code, I can evaluate at any block level using C-c C-c. However,
  C-enter will always evaluate the whole function defintion. To
  evalute a custom region using Juno, you have to select the region,
  which is not convenient.

#+BEGIN_SRC julia
function test()
    for i=1:10
        for j=2:8
            println("hello")
        end
    end
end
#+END_SRC

* New Features

These are not submited to
[[https://github.com/tpapp/julia-repl][julia-repl]] because they are
not mature enough, and the change is not small, and might not suit
anyone.

** comint-mode by default
comint-mode is better than term in the sense that:
- you can freely move around the buffer without switching char/term
  state (C-x C-j in term-mode)
- you can implement more functionalities, e.g. replacing images

** send by block
C-c C-c will recognize open block, and send until the matched closing
block.

** DONE viewing images in repl
   CLOSED: [2019-10-14 Mon 12:23]

Install:

#+BEGIN_SRC julia
using Pkg;
Pkg.add(PackageSpec(url="https://github.com/lihebi/julia-repl", rev="master"));
#+END_SRC

or

#+BEGIN_EXAMPLE
] add https://github.com/lihebi/julia-repl
#+END_EXAMPLE

Usage:

#+BEGIN_SRC julia
using EmacsREPL
viewrepl(img)
#+END_SRC

** DONE comint term auto complete
   CLOSED: [2019-10-16 Wed 14:46]
This is a must have.

*** how elpy works?

elpy is not implementing this itself. It is using python.el's. The
function is =python-shell-completion-at-point=. Basically it sends a
python code wrapper to print out possible completion to the inferior
python process, and parse the output, and build the completion list.

This function is added to =completion-at-point-functions=, so that
=completion-at-point= can pick it up. In *Python* buffer, it eavlautes to

#+BEGIN_EXAMPLE
(python-shell-completion-at-point comint-completion-at-point t)
#+END_EXAMPLE

elpy also has =comint-completion-at-point= in this list, but that
seems to be very much just =completion-at-point=.

And in the define-derived-mode inferior-python-mode comint-mode
definition, add the hook:

#+BEGIN_SRC elisp
(add-hook 'completion-at-point-functions
            #'python-shell-completion-at-point nil 'local)
#+END_SRC

As a side note, there is one weird thing about elpy: it has RPC and
backend server in python. But looks like it only talk to the inferior
python process. How the RPC process is using? If both processes are
used, the send code function should send to both side? I only see code
sending to inferior python process. Also, it is quite impossible to
keep both process consistent, because user can execute arbitrary code
in REPL.

*** My plan about julia-repl

I will need to write a Julia code wrapper for querying the
information. Now the question is what API to use.

To send string to inferior and hijack the output, the python.el is
implementing some awkward code. In a nut shell, I'll need to
1. set =comint-preoutput-filter-functions=, to a list of functions,
   which accepts output and should return "", so nothing is inserted.
2. To capture the output, this function should save the output
   somewhere. Then I'll read that, and clean it before returning it.
3. In addition, since this function is run async, I'll need to wait
   for it to complete.
4. Do the call to send-string, and wait until filter function gets all
   output.
To implement all these, python.el is keeping multiple variables to
sync with functions and get results, and using loops to
=accept-process-output= and check finish flag. This is not elegent.

Instead, I found I can probably just use
=comint-redirect-results-list-from-process=, which roughly implement
the same logic in a more elegent way, and of course more elegent on
the user side.

* TODO-List

** TODO Look up symbol
- LanguageServer.jl https://github.com/julia-vscode/LanguageServer.jl
  - This is NOT used by Juno, so I would rather not use it.
  - language-server-protocol https://github.com/Microsoft/language-server-protocol
- non-Jedi's comment on using eglot: https://github.com/julia-vscode/LanguageServer.jl/wiki/Emacs
- M-. issue in julia-repl https://github.com/tpapp/julia-repl/issues/50
- lsp-julia https://github.com/non-Jedi/lsp-julia
- lsp-mode https://github.com/emacs-lsp/lsp-mode

The Juno's way:
- backend Atom.jl implements the logic of goto symbol, by simply parse
  the source code
  - parse local source code for local bindings
  - parse top level
  - parse imported module's source code
- While simple, I probably do not intent to rewrite those code, so I'm
  going to just use Atom.jl, and write a simple wrapper around it.
  - I need to invoke the server to run the backend daemon
    - the server needs to know the specific file I'm in? Probably not,
      I can just send the file path to it
  - I need to have the interface to talk to the backend

Maybe send a json over TCP containig a list with:

#+BEGIN_EXAMPLE
handle("gotosymbol") do data
  @destruct [
    word,
    path || nothing,
    # local context
    column || 1,
    row || 1,
    startRow || 0,
    context || "",
    onlyGlobal || true,
    # module context
    mod || "Main",
    text || "",
  ] = data
  gotosymbol(
    word, path,
    column, row, startRow, context, onlyGlobal,
    mod, text
  )
end
#+END_EXAMPLE

So as a test:

#+BEGIN_EXAMPLE
["gotosymbol" "hello" "/path/to/file.jl" 12 23 0 "" true]
#+END_EXAMPLE

** TODO get reference to symbol
This is considerably harder for Juno's in-place parsing approach. Juno
does not seem to have this.

** TODO Juno's @progress

** TODO flash region when evaluating

See elpy as reference:

#+BEGIN_SRC elisp
(defun elpy-shell--flash-and-message-region (begin end)
  "Displays information about code fragments sent to the shell.

BEGIN and END refer to the region of the current buffer
containing the code being sent. Displays a message with the first
line of that region. If `eval-sexp-fu-flash-mode' is active,
additionally flashes that region briefly."
  (when (> end begin)
    (save-excursion
      (goto-char begin)
      (end-of-line)
      (if (<= end (point))
          (message "Sent: %s" (string-trim (thing-at-point 'line)))
        (message "Sent: %s..." (string-trim (thing-at-point 'line)))))
    (when (bound-and-true-p eval-sexp-fu-flash-mode)
      (multiple-value-bind (_bounds hi unhi _eflash)
          (eval-sexp-fu-flash (cons begin end))
        (eval-sexp-fu-flash-doit (lambda () t) hi unhi)))))
#+END_SRC

** TODO Doc
The default doc works fine, =C-c C-d= will send =@doc xxx= to the
repl. The only problem is that the fill paragraph does not seem to
work correctly.  For example, =@doc reshape=.

** TODO filter input
Remove comments

** Juno stack

*** atom-ink
inline evaluation results https://github.com/JunoLab/atom-ink

*** TODO [#A] Atom.jl
Juno side: backend https://github.com/JunoLab/Atom.jl

This is where the gotosymbol is actually implemented.

But where is serve() being called? It does not seem to be called
here. So it is called by the atom plugin?

*** TODO atom-julia-client
Atom side https://github.com/JunoLab/atom-julia-client

*** Juno.jl
Julia code side: a light front-end for using @progress in your Julia
code https://github.com/JunoLab/Juno.jl

*** other

- https://github.com/JuliaLang/atom-language-julia: basic language
  support
- http://github.com/JunoLab/CodeTools.jl: autocompletion and
  evaluation

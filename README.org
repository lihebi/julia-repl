#+TITLE: My fork of julia-repl

This is my fork, mainly to use comint and add additional utilities to
send code blocks.

* Julia Package

** DONE viewing images in repl
   CLOSED: [2019-10-14 Mon 12:23]

Install:

#+BEGIN_SRC julia
using Pkg;
Pkg.add(PackageSpec(url="https://github.com/lihebi/julia-repl", rev="master"));
#+END_SRC

or

#+BEGIN_EXAMPLE
] add https://github.com/lihebi/julia-repl
#+END_EXAMPLE

Usage:

#+BEGIN_SRC julia
using EmacsREPL
viewrepl(img)
#+END_SRC

* TODO-List

** STARTED Look up symbol
- LanguageServer.jl https://github.com/julia-vscode/LanguageServer.jl
  - This is NOT used by Juno, so I would rather not use it.
  - language-server-protocol https://github.com/Microsoft/language-server-protocol
- non-Jedi's comment on using eglot: https://github.com/julia-vscode/LanguageServer.jl/wiki/Emacs
- M-. issue in julia-repl https://github.com/tpapp/julia-repl/issues/50
- lsp-julia https://github.com/non-Jedi/lsp-julia
- lsp-mode https://github.com/emacs-lsp/lsp-mode

The Juno's way:
- backend Atom.jl implements the logic of goto symbol, by simply parse
  the source code
  - parse local source code for local bindings
  - parse top level
  - parse imported module's source code
- While simple, I probably do not intent to rewrite those code, so I'm
  going to just use Atom.jl, and write a simple wrapper around it.
  - I need to invoke the server to run the backend daemon
    - the server needs to know the specific file I'm in? Probably not,
      I can just send the file path to it
  - I need to have the interface to talk to the backend

Maybe send a json over TCP containig a list with:

#+BEGIN_EXAMPLE
handle("gotosymbol") do data
  @destruct [
    word,
    path || nothing,
    # local context
    column || 1,
    row || 1,
    startRow || 0,
    context || "",
    onlyGlobal || true,
    # module context
    mod || "Main",
    text || "",
  ] = data
  gotosymbol(
    word, path,
    column, row, startRow, context, onlyGlobal,
    mod, text
  )
end
#+END_EXAMPLE

So as a test:

#+BEGIN_EXAMPLE
["gotosymbol" "hello" "/path/to/file.jl" 12 23 0 "" true]
#+END_EXAMPLE



** TODO get reference to symbol
This is considerably harder for Juno's in-place parsing approach. Juno
does not seem to have this.

** TODO Juno's @progress

** TODO Doc
The default doc works fine, =C-c C-d= will send =@doc xxx= to the
repl. The only problem is that the fill paragraph does not seem to
work correctly.  For example, =@doc reshape=.

** TODO filter input
Remove comments

** Juno stack

*** atom-ink
inline evaluation results https://github.com/JunoLab/atom-ink

*** TODO [#A] Atom.jl
Juno side: backend https://github.com/JunoLab/Atom.jl

This is where the gotosymbol is actually implemented.

But where is serve() being called? It does not seem to be called
here. So it is called by the atom plugin?

*** TODO atom-julia-client
Atom side https://github.com/JunoLab/atom-julia-client

*** Juno.jl
Julia code side: a light front-end for using @progress in your Julia
code https://github.com/JunoLab/Juno.jl

*** other

- https://github.com/JuliaLang/atom-language-julia: basic language
  support
- http://github.com/JunoLab/CodeTools.jl: autocompletion and
  evaluation

#+TITLE: Implmenentation notes

* TODO-List

** FIXME output freeze when jump to definition
when I send get definition to background, the output freezes.

#+BEGIN_SRC julia
for i in 1:10
    @show "hello"
    sleep(1)
end
#+END_SRC

** TODO separate repo for EmacsREPL.jl?

** TODO get reference to symbol
This is considerably harder for Juno's in-place parsing approach. Juno
does not seem to have this.

** TODO filter input
Remove comments

* References
** Juno stack

*** atom-ink
inline evaluation results https://github.com/JunoLab/atom-ink

*** TODO [#A] Atom.jl
Juno side: backend https://github.com/JunoLab/Atom.jl

This is where the gotosymbol is actually implemented.

But where is serve() being called? It does not seem to be called
here. So it is called by the atom plugin?

*** TODO atom-julia-client
Atom side https://github.com/JunoLab/atom-julia-client

*** Juno.jl
Julia code side: a light front-end for using @progress in your Julia
code https://github.com/JunoLab/Juno.jl

*** other

- https://github.com/JuliaLang/atom-language-julia: basic language
  support
- http://github.com/JunoLab/CodeTools.jl: autocompletion and
  evaluation

* DONE-list

** DONE Look up symbol
   CLOSED: [2019-10-17 Thu 13:51]


*** DONE Using reflection
    CLOSED: [2019-10-17 Thu 13:53]

You can just use M-. to jump to the definition of functions. No local
variable bindings.

Under the hood, it is implemented as xref backend, and can be invokded
by =xref-find-definitions=. The definition is retrieved from the
inferior julia process, using reflection =methods=. The idea is from
https://github.com/tpapp/julia-repl/issues/50

#+BEGIN_SRC julia
methods(findfirst)
methods(reshape)
methods(Flux.train!)
#+END_SRC

To add this as backend function for xref:

#+BEGIN_SRC elisp
(add-hook 'xref-backend-functions #'xxx--xref-backend nil t)
(remove-hook 'xref-backend-functions #'xxx--xref-backend t)
#+END_SRC

Each xref item is
#+BEGIN_SRC elisp
(xref-make "name"
           (xref-make-file-location filename
                                    linum
                                    colnum))
#+END_SRC

*** Using language server protocol
- LanguageServer.jl https://github.com/julia-vscode/LanguageServer.jl
  - This is NOT used by Juno, so I would rather not use it.
  - language-server-protocol https://github.com/Microsoft/language-server-protocol
- non-Jedi's comment on using eglot: https://github.com/julia-vscode/LanguageServer.jl/wiki/Emacs
- M-. issue in julia-repl https://github.com/tpapp/julia-repl/issues/50
- lsp-julia https://github.com/non-Jedi/lsp-julia
- lsp-mode https://github.com/emacs-lsp/lsp-mode

*** The Juno's way (Atom.jl)
- backend Atom.jl implements the logic of goto symbol, by simply parse
  the source code
  - parse local source code for local bindings
  - parse top level
  - parse imported module's source code
- While simple, I probably do not intent to rewrite those code, so I'm
  going to just use Atom.jl, and write a simple wrapper around it.
  - I need to invoke the server to run the backend daemon
    - the server needs to know the specific file I'm in? Probably not,
      I can just send the file path to it
  - I need to have the interface to talk to the backend

Maybe send a json over TCP containig a list with:

#+BEGIN_EXAMPLE
handle("gotosymbol") do data
  @destruct [
    word,
    path || nothing,
    # local context
    column || 1,
    row || 1,
    startRow || 0,
    context || "",
    onlyGlobal || true,
    # module context
    mod || "Main",
    text || "",
  ] = data
  gotosymbol(
    word, path,
    column, row, startRow, context, onlyGlobal,
    mod, text
  )
end
#+END_EXAMPLE

So as a test:

#+BEGIN_EXAMPLE
["gotosymbol" "hello" "/path/to/file.jl" 12 23 0 "" true]
#+END_EXAMPLE


** DONE flash region when evaluating
   CLOSED: [2019-11-01 Fri 15:59]

EDIT: turns out I just need eval-sexp-fu package

See elpy as reference:

#+BEGIN_SRC elisp
(defun elpy-shell--flash-and-message-region (begin end)
  "Displays information about code fragments sent to the shell.

BEGIN and END refer to the region of the current buffer
containing the code being sent. Displays a message with the first
line of that region. If `eval-sexp-fu-flash-mode' is active,
additionally flashes that region briefly."
  (when (> end begin)
    (save-excursion
      (goto-char begin)
      (end-of-line)
      (if (<= end (point))
          (message "Sent: %s" (string-trim (thing-at-point 'line)))
        (message "Sent: %s..." (string-trim (thing-at-point 'line)))))
    (when (bound-and-true-p eval-sexp-fu-flash-mode)
      (multiple-value-bind (_bounds hi unhi _eflash)
          (eval-sexp-fu-flash (cons begin end))
        (eval-sexp-fu-flash-doit (lambda () t) hi unhi)))))
#+END_SRC

** DONE Juno's @progress
   CLOSED: [2019-11-01 Fri 16:00]

Use ProgressMeter
** DONE Doc
   CLOSED: [2019-11-01 Fri 16:01]
The default doc works fine, =C-c C-d= will send =@doc xxx= to the
repl. The only problem is that the fill paragraph does not seem to
work correctly.  For example, =@doc reshape=.

This is caused by global-display-linum-mode. Seems to be fixed in the config
there.

